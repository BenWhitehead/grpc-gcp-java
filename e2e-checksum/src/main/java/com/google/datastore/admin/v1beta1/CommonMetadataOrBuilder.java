// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/datastore/admin/v1beta1/datastore_admin.proto

package com.google.datastore.admin.v1beta1;

public interface CommonMetadataOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.datastore.admin.v1beta1.CommonMetadata)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The time that work began on the operation.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 1;</code>
   */
  boolean hasStartTime();
  /**
   * <pre>
   * The time that work began on the operation.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 1;</code>
   */
  com.google.protobuf.Timestamp getStartTime();
  /**
   * <pre>
   * The time that work began on the operation.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 1;</code>
   */
  com.google.protobuf.TimestampOrBuilder getStartTimeOrBuilder();

  /**
   * <pre>
   * The time the operation ended, either successfully or otherwise.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp end_time = 2;</code>
   */
  boolean hasEndTime();
  /**
   * <pre>
   * The time the operation ended, either successfully or otherwise.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp end_time = 2;</code>
   */
  com.google.protobuf.Timestamp getEndTime();
  /**
   * <pre>
   * The time the operation ended, either successfully or otherwise.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp end_time = 2;</code>
   */
  com.google.protobuf.TimestampOrBuilder getEndTimeOrBuilder();

  /**
   * <pre>
   * The type of the operation. Can be used as a filter in
   * ListOperationsRequest.
   * </pre>
   *
   * <code>.google.datastore.admin.v1beta1.OperationType operation_type = 3;</code>
   */
  int getOperationTypeValue();
  /**
   * <pre>
   * The type of the operation. Can be used as a filter in
   * ListOperationsRequest.
   * </pre>
   *
   * <code>.google.datastore.admin.v1beta1.OperationType operation_type = 3;</code>
   */
  com.google.datastore.admin.v1beta1.OperationType getOperationType();

  /**
   * <pre>
   * The client-assigned labels which were provided when the operation was
   * created. May also include additional labels.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 4;</code>
   */
  int getLabelsCount();
  /**
   * <pre>
   * The client-assigned labels which were provided when the operation was
   * created. May also include additional labels.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 4;</code>
   */
  boolean containsLabels(
      java.lang.String key);
  /**
   * Use {@link #getLabelsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getLabels();
  /**
   * <pre>
   * The client-assigned labels which were provided when the operation was
   * created. May also include additional labels.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 4;</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getLabelsMap();
  /**
   * <pre>
   * The client-assigned labels which were provided when the operation was
   * created. May also include additional labels.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 4;</code>
   */

  java.lang.String getLabelsOrDefault(
      java.lang.String key,
      java.lang.String defaultValue);
  /**
   * <pre>
   * The client-assigned labels which were provided when the operation was
   * created. May also include additional labels.
   * </pre>
   *
   * <code>map&lt;string, string&gt; labels = 4;</code>
   */

  java.lang.String getLabelsOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * The current state of the Operation.
   * </pre>
   *
   * <code>.google.datastore.admin.v1beta1.CommonMetadata.State state = 5;</code>
   */
  int getStateValue();
  /**
   * <pre>
   * The current state of the Operation.
   * </pre>
   *
   * <code>.google.datastore.admin.v1beta1.CommonMetadata.State state = 5;</code>
   */
  com.google.datastore.admin.v1beta1.CommonMetadata.State getState();
}
